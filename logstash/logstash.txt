docker pull docker.elastic.co/logstash/logstash:8.8.2

docker network create palolog

docker run -p 9200:9200 -p 9600:9600 --name opensearch --net palolog -e "discovery.type=single-node" opensearchproject/opensearch:1.2.0

docker run -it --rm --name logstash --net palolog -p 514:514/udp \
  -e LS_JAVA_OPTS="-Xms4g -Xmx4g" \
  -e "pipeline.batch.size=5000" \
  -e "pipeline.workers=4" \
  opensearchproject/logstash-oss-with-opensearch-output-plugin:7.16.2 \
  -e '
      input {
        udp {
          port => 514
          codec => plain
          queue_size => 20000
        }
      }

      filter {
        csv {
          separator => ","
          skip_empty_columns => true
          columns => [
            "d000", "d001", "d002", "d003", "d004", "d005", "d006", "d007", 
            "d008", "d009", "d010", "d011", "d012", "d013", "d014", "d015", 
            "d016", "d017", "d018", "d019", "d020", "d021", "d022", "d023", 
            "d024", "d025", "d026", "d027", "d028", "d029", "d030", "d031", 
            "d032", "d033", "d034", "d035", "d036", "d037", "d038", "d039", 
            "d040", "d041", "d042", "d043", "d044", "d045", "d046", "d047", 
            "d048", "d049", "d050", "d051", "d052", "d053", "d054", "d055", 
            "d056", "d057", "d058", "d059", "d060", "d061", "d062", "d063", 
            "d064", "d065", "d066", "d067", "d068", "d069", "d070", "d071", 
            "d072", "d073", "d074", "d075", "d076", "d077", "d078", "d079", 
            "d080", "d081", "d082", "d083", "d084", "d085", "d086", "d087", 
            "d088", "d089", "d090", "d091", "d092", "d093", "d094", "d095", 
            "d096", "d097", "d098", "d099", "d100", "d101", "d102", "d103", 
            "d104", "d105", "d106", "d107", "d108", "d109", "d110", "d111", 
            "d112", "d113", "d114", "d115", "d116", "d117", "d118", "d119"
          ]
        }

        # 타임스탬프 처리를 위한 필터 추가
        date {
          match => [ "d001", "yyyy/MM/dd HH:mm:ss" ]
          target => "@timestamp"
          timezone => "Asia/Seoul"  # 입력 시간을 KST로 해석
        }

        mutate{
          remove_field => ["message"]
        }
      }

      output {
        if [d003] == "THREAT" {
          opensearch {
            hosts => ["https://opensearch:9200"]
            index => "threat-logs-%{+YYYY.MM.dd}"
            user => $OPENSEARCH_USERNAME
            password => $OPENSEARCH_PASSWORD
            ssl => false
            ssl_certificate_verification => false
          }
        }

        opensearch {
          hosts => ["https://opensearch:9200"]
          index => "logstash-logs-%{+YYYY.MM.dd}"
          user => $OPENSEARCH_USERNAME
          password => $OPENSEARCH_PASSWORD
          ssl => false
          ssl_certificate_verification => false
        }
      }
      '


# test

# 현재 인덱스 목록
curl -X GET "https://localhost:9200/_cat/indices?v&pretty" -u "admin:admin" --insecure

# 최근 10개 데이터 출력

curl -X GET "https://localhost:9200/logstash-logs-*/_search?pretty" \
-H 'Content-Type: application/json' \
-d '{
  "size": 10,
  "sort": [
    {
      "@timestamp": {
        "order": "desc"
      }
    }
  ]
}' -u admin:admin -k

# 테스트 실행 명령어
docker remove -f logstash1; docker remove -f logstash2; docker remove -f logstash3; docker remove -f logstash4; docker remove -f logstash5; docker remove -f opensearch; pnpm dk:init;

# 보안 인증서 복사
docker cp opensearch:/usr/share/opensearch/config/root-ca.pem ./ca-cert.pem