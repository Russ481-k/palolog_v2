input {
    udp {
        port => 514
        codec => plain
        queue_size => 20000
    }
}

filter {
    # syslog 형식에서 도메인 추출
    grok {
        match => { "message" => "^<?(?:\d+)?>?\s*(?:[A-Za-z]{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})\s+(?<original_domain>[^\,]+)" }
        tag_on_failure => ["_grokparsefailure"]
    }

    csv {
        separator => ","
        skip_empty_columns => false
        columns => [
            "domain", "receiveTime", "serial", "logType", 
            "threatContentType", "configVersion", "generateTime", 
            "d000", "d001", "d002", "d003", "d004", "d005", "d006", "d007", 
            "d008", "d009", "d010", "d011", "d012", "d013", "d014", "d015", 
            "d016", "d017", "d018", "d019", "d020", "d021", "d022", "d023", 
            "d024", "d025", "d026", "d027", "d028", "d029", "d030", "d031", 
            "d032", "d033", "d034", "d035", "d036", "d037", "d038", "d039", 
            "d040", "d041", "d042", "d043", "d044", "d045", "d046", "d047", 
            "d048", "d049", "d050", "d051", "d052", "d053", "d054", "d055", 
            "d056", "d057", "d058", "d059", "d060", "d061", "d062", "d063", 
            "d064", "d065", "d066", "d067", "d068", "d069", "d070", "d071", 
            "d072", "d073", "d074", "d075", "d076", "d077", "d078", "d079", 
            "d080", "d081", "d082", "d083", "d084", "d085", "d086", "d087", 
            "d088", "d089", "d090", "d091", "d092", "d093", "d094", "d095", 
            "d096", "d097", "d098", "d099", "d100", "d101", "d102", "d103", 
            "d104", "d105", "d106", "d107", "d108", "d109", "d110", "d111", 
            "d112", "d113", "d114"
        ]
    }

    ruby {
        code => '
            begin
                timestamp = event.get("@timestamp")
                
                # 원본 syslog 도메인과 CSV 도메인 모두 보존
                original_domain = event.get("original_domain")
                csv_domain = event.get("domain")
                
                # 인덱싱을 위한 도메인 처리
                index_domain = original_domain || csv_domain || "unknown"
                index_domain = index_domain.downcase
                           .gsub(/\./, "-")
                           .gsub(/[^a-z0-9\-]/, "_")
                           .gsub(/-+/, "-")
                           .gsub(/_+/, "_")
                
                kst_time = timestamp.time.getlocal("+09:00")
                index_name = "#{kst_time.strftime("%Y.%m.%d.%H")}_#{index_domain}".downcase
                
                puts "Syslog Domain: #{original_domain}"
                puts "CSV Domain: #{csv_domain}"
                puts "Index Domain: #{index_domain}"
                puts "Index: #{index_name}"
                
                # 메타데이터 설정
                event.set("[@metadata][index_name]", index_name)
                # 원본 도메인 값들 보존
                event.set("syslog_domain", original_domain) if original_domain
            rescue => e
                puts "Error in Ruby filter: #{e.message}"
                puts e.backtrace.join("\n")
                event.tag("_rubyparsefalure")
                event.set("[@metadata][index_name]", "error-logs-#{Time.now.strftime("%Y.%m.%d")}")
            end
        '
    }

    if [logType] == "TRAFFIC" {
        mutate {
            rename => {
                "d000" => "sourceAddress"
                "d001" => "destinationAddress"
                "d002" => "natSourceIp"
                "d003" => "natDestinationIp"
                "d004" => "rule"
                "d005" => "sourceUser"
                "d006" => "destinationUser"
                "d007" => "application"
                "d008" => "virtualSystem"
                "d009" => "sourceZone"
                "d010" => "destinationZone"
                "d011" => "inboundInterface"
                "d012" => "outboundInterface"
                "d013" => "logAction"
                "d014" => "timeLogged"
                "d015" => "sessionId"
                "d016" => "repeatCount"
                "d017" => "sourcePort"
                "d018" => "destinationPort"
                "d019" => "natSourcePort"
                "d020" => "natDestinationPort"
                "d021" => "flags"
                "d022" => "ipProtocol"
                "d023" => "action"
                "d024" => "bytes"
                "d025" => "bytesSent"
                "d026" => "bytesReceived"
                "d027" => "packets"
                "d028" => "startTime"
                "d029" => "elapsedTimeSec"
                "d030" => "category"
                "d031" => "sequenceNumber"
                "d032" => "actionFlags"
                "d033" => "sourceCountry"
                "d034" => "destinationCountry"
                "d035" => "packetsSent"
                "d036" => "packetsReceived"
                "d037" => "sessionEndReason"
                "d038" => "dgHierarchyLevel1"
                "d039" => "dgHierarchyLevel2"
                "d040" => "dgHierarchyLevel3"
                "d041" => "dgHierarchyLevel4"
                "d042" => "virtualSystemName"
                "d043" => "deviceName"
                "d044" => "actionSource"
                "d045" => "sourceVmUuid"
                "d046" => "destinationVmUuid"
                "d047" => "tunnelIdImsi"
                "d048" => "monitorTagImei"
                "d049" => "parentSessionId"
                "d050" => "parentSessionStartTime"
                "d051" => "tunnel"
                "d052" => "sctpAssociationId"
                "d053" => "sctpChunks"
                "d054" => "sctpChunksSent"
                "d055" => "sctpChunksReceived"
                "d056" => "uuidForRule"
                "d057" => "http2Connection"
                "d058" => "linkChangeCount"
                "d059" => "policyId"
                "d060" => "linkSwitches"
                "d061" => "sdwanCluster"
                "d062" => "sdwanDeviceType"
                "d063" => "sdwanClusterType"
                "d064" => "sdwanSite"
                "d065" => "dynUserGroupName"
                "d066" => "xffAddress"
                "d067" => "sourceDeviceCategory"
                "d068" => "sourceDeviceProfile"
                "d069" => "sourceDeviceModel"
                "d070" => "sourceDeviceVendor"
                "d071" => "sourceDeviceOsFamily"
                "d072" => "sourceDeviceOsVersion"
                "d073" => "sourceHostName"
                "d074" => "sourceMacAddress"
                "d075" => "destinationDeviceCategory"
                "d076" => "destinationDeviceProfile"
                "d077" => "destinationDeviceModel"
                "d078" => "destinationDeviceVendor"
                "d079" => "destinationDeviceOsFamily"
                "d080" => "destinationDeviceOsVersion"
                "d081" => "destinationHostName"
                "d082" => "destinationMacAddress"
                "d083" => "containerId"
                "d084" => "podNamespace"
                "d085" => "podName"
                "d086" => "sourceExternalDynamicList"
                "d087" => "destinationExternalDynamicList"
                "d088" => "hostId"
                "d089" => "serialNumber"
                "d090" => "sourceDynamicAddressGroup"
                "d091" => "destinationDynamicAddressGroup"
                "d092" => "sessionOwner"
                "d093" => "highResTimestamp"
                "d094" => "nssaiSst"
                "d095" => "nssaiSd"
                "d096" => "subcategoryOfApp"
                "d097" => "technologyOfApp"
                "d098" => "riskOfApp"
                "d099" => "characteristicOfApp"
                "d100" => "containerOfApp"
                "d101" => "tunneledApp"
                "d102" => "saasOfApp"
                "d103" => "sanctionedStateOfApp"
                "d104" => "offloaded"
                "d105" => "flowType"
                "d106" => "clusterName"
            }
            remove_field => ["message", "d108", "d109", "d110", "d111", "d112", "d113", "d114"]
        }
    }

    if [logType] == "THREAT" {
        mutate {
            rename => {
                "d000" => "sourceAddress"
                "d001" => "destinationAddress"
                "d002" => "natSourceIp"
                "d003" => "natDestinationIp"
                "d004" => "rule"
                "d005" => "sourceUser"
                "d006" => "destinationUser"
                "d007" => "application"
                "d008" => "virtualSystem"
                "d009" => "sourceZone"
                "d010" => "destinationZone"
                "d011" => "inboundInterface"
                "d012" => "outboundInterface"
                "d013" => "logAction"
                "d014" => "timeLogged"
                "d015" => "sessionId"
                "d016" => "repeatCount"
                "d017" => "sourcePort"
                "d018" => "destinationPort"
                "d019" => "natSourcePort"
                "d020" => "natDestinationPort"
                "d021" => "flags"
                "d022" => "ipProtocol"
                "d023" => "action"
                "d024" => "urlFileName"
                "d025" => "threatContentName"
                "d026" => "category"
                "d027" => "severity"
                "d028" => "direction"
                "d029" => "sequenceNumber"
                "d030" => "actionFlags"
                "d031" => "sourceCountry"
                "d032" => "destinationCountry"
                "d033" => "contentType"
                "d034" => "pcapId"
                "d035" => "fileDigest"
                "d036" => "cloud"
                "d037" => "urlIdx"
                "d038" => "userAgent"
                "d039" => "fileType"
                "d040" => "xff"
                "d041" => "referer"
                "d042" => "sender"
                "d043" => "subject"
                "d044" => "recipient"
                "d045" => "reportId"
                "d046" => "dgHierarchyLevel1"
                "d047" => "dgHierarchyLevel2"
                "d048" => "dgHierarchyLevel3"
                "d049" => "dgHierarchyLevel4"
                "d050" => "virtualSystemName"
                "d051" => "deviceName"
                "d052" => "fileUrl"
                "d053" => "sourceVmUuid"
                "d054" => "destinationVmUuid"
                "d055" => "httpMethod"
                "d056" => "tunnelIdImsi"
                "d057" => "monitorTagImei"
                "d058" => "parentSessionId"
                "d059" => "parentSessionStartTime"
                "d060" => "tunnel"
                "d061" => "thrCategory"
                "d062" => "contentVer"
                "d063" => "sigFlags"
                "d064" => "sctpAssociationId"
                "d065" => "payloadProtocolId"
                "d066" => "httpHeaders"
                "d067" => "urlCategoryList"
                "d068" => "uuidForRule"
                "d069" => "http2Connection"
                "d070" => "dynUserGroupName"
                "d071" => "xffAddress"
                "d072" => "sourceDeviceCategory"
                "d073" => "sourceDeviceProfile"
                "d074" => "sourceDeviceModel"
                "d075" => "sourceDeviceVendor"
                "d076" => "sourceDeviceOsFamily"
                "d077" => "sourceDeviceOsVersion"
                "d078" => "sourceHostName"
                "d079" => "sourceMacAddress"
                "d080" => "destinationDeviceCategory"
                "d081" => "destinationDeviceProfile"
                "d082" => "destinationDeviceModel"
                "d083" => "destinationDeviceVendor"
                "d084" => "destinationDeviceOsFamily"
                "d085" => "destinationDeviceOsVersion"
                "d086" => "destinationHostName"
                "d087" => "destinationMacAddress"
                "d088" => "containerId"
                "d089" => "podNamespace"
                "d090" => "podName"
                "d091" => "sourceExternalDynamicList"
                "d092" => "destinationExternalDynamicList"
                "d093" => "hostId"
                "d094" => "serialNumber"
                "d095" => "domainEdl"
                "d096" => "sourceDynamicAddressGroup"
                "d097" => "destinationDynamicAddressGroup"
                "d098" => "partialHash"
                "d099" => "highResTimestamp"
                "d100" => "reason"
                "d101" => "justification"
                "d102" => "nssaiSst"
                "d103" => "subcategoryOfApp"
                "d104" => "categoryOfApp"
                "d105" => "technologyOfApp"
                "d106" => "riskOfApp"
                "d107" => "characteristicOfApp"
                "d108" => "containerOfApp"
                "d109" => "tunneledApp"
                "d110" => "saasOfApp"
                "d111" => "sanctionedStateOfApp"
                "d112" => "cloudReportId"
                "d113" => "clusterName"
                "d114" => "flowType"
            }
            remove_field => ["message"]
        }
    }

    if [logType] == "SYSTEM" {
        mutate {
            rename => {
                "d000" => "virtualSystem"
                "d001" => "eventId"
                "d002" => "objectFmt"
                "d003" => "id"
                "d004" => "module"
                "d005" => "severity"
                "d006" => "description"
                "d007" => "sequenceNumber"
                "d008" => "actionFlags"
                "d009" => "dgHierarchyLevel1"
                "d010" => "dgHierarchyLevel2"
                "d011" => "dgHierarchyLevel3"
                "d012" => "dgHierarchyLevel4"
                "d013" => "virtualSystemName"
                "d014" => "deviceName"
                "d015" => "dgId"
                "d016" => "tplId"
                "d017" => "highResTimestamp"
            }
            remove_field => ["message", "d018", "d019", "d020", "d021", "d022", "d023", "d024", "d025", "d026", "d027", "d028", "d029", "d030", "d031", "d032", "d033", "d034", "d035", "d036", "d037", "d038", "d039", "d040", "d041", "d042", "d043", "d044", "d045", "d046", "d047", "d048", "d049", "d050", "d051", "d052", "d053", "d054", "d055", "d056", "d057", "d058", "d059", "d060", "d061", "d062", "d063", "d064", "d065", "d066", "d067", "d068", "d069", "d070", "d071", "d072", "d073", "d074", "d075", "d076", "d077", "d078", "d079", "d080", "d081", "d082", "d083", "d084", "d085", "d086", "d087", "d088", "d089", "d090", "d091", "d092", "d093", "d094", "d095", "d096", "d097", "d098", "d099", "d100", "d101", "d102", "d103", "d104", "d105", "d106", "d107", "d108", "d109", "d110", "d111", "d112", "d113", "d114"]
        }
    }

    date {
        match => [ "d001", "yyyy/MM/dd HH:mm:ss" ]
        target => "@timestamp"
        timezone => "Asia/Seoul"
    }

    date {
        match => [ "@timestamp", "ISO8601" ]
        timezone => "Asia/Seoul"
    }
}

output {
    # if [logType] == "THREAT" {
    #     opensearch {
    #         hosts => ["https://opensearch:9200"]
    #         index => "threat-%{[@metadata][index_name]}"
    #         user => "admin"
    #         password => "admin"
    #         ssl => false
    #         ssl_certificate_verification => false
    #     }
    # }

    opensearch {
        hosts => ["https://opensearch:9200"]
        index => "%{[@metadata][index_name]}"
        user => "admin"
        password => "admin"
        ssl => false
        ssl_certificate_verification => false
    }
}