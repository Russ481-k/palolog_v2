// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  // User has registered and verified their email
  ENABLED
  // User has been disabled and can't login anymore
  DISABLED
  // User did register, but has not verified their email yet.
  NOT_VERIFIED
}

enum UserRole {
  APP
  ADMIN
}

enum SearchSessionStatus {
  ACTIVE
  CANCELLED
  COMPLETED
  ERROR
}

model User {
  id             String        @id @default(cuid())
  password       String        @default("$2b$08$Y5DIAN4lvVIpjGjaFPd.nup8F/dQxbyOuWEprW9/p9LWmInveT6Fe")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  name           String?
  email          String        @unique
  accountStatus  AccountStatus @default(NOT_VERIFIED)
  image          String?
  authorizations UserRole[]    @default([APP])
  language       String        @default("en")
  lastLoginAt    DateTime?
  searchSessions SearchSession[]
}

model VerificationToken {
  userId        String
  token         String   @unique
  expires       DateTime
  lastAttemptAt DateTime @updatedAt
  attempts      Int      @default(0)
  // Useful to change the user email. This model will contains the next user
  // email, waiting for the user to validate it.
}

model Repository {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  link        String
  description String?
}

model Project {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  description String?
}

model Menu {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  columns     MenuColumn[]
  description String?
}

model Column {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  menus       MenuColumn[]
  description String?
}

model MenuColumn {
  id       Int    @id @default(autoincrement())
  menuId   Int
  columnId Int
  menu     Menu   @relation(fields: [menuId], references: [id])
  column   Column @relation(fields: [columnId], references: [id])

  @@unique([menuId, columnId])
}

model SystemLicense {
  id           String    @id @default(cuid())
  hardwareHash String    @unique
  activatedAt  DateTime  @default(now())
  expiresAt    DateTime
  lastCheckedAt DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model SearchSession {
  id            String             @id @default(cuid())
  userId        String
  clientIp      String
  userAgent     String
  searchId      String             @unique
  status        SearchSessionStatus
  searchParams  Json
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  lastActivityAt DateTime          @default(now())
  cancelReason  String?

  user          User               @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([clientIp])
  @@index([status])
  @@index([searchId])
}
